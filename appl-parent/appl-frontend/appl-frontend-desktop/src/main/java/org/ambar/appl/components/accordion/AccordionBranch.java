/**
 * appl-frontend-desktop [19/04/2012 22:41:44]
 */
package org.ambar.appl.components.accordion;

import java.awt.Color;
import java.awt.GridLayout;

import javax.swing.JTree;

import org.ambar.appl.components.listeners.AmbarTreeListener;
import org.ambar.appl.components.tree.IconTreeModel;
import org.ambar.appl.components.tree.IconTreeRenderer;
import org.ambar.appl.components.tree.TreeEntry;

/**
 * <p>
 * AccordionBranch is a simple <code>JPanel</code> object. It will be used to
 * display menu items under a Menu Root Item. It is an inheritance of JPanel because
 * first of all it has a different layout, like a little margin around future menu
 * items. It also implements a cheap method to fill void spaces when there is a small
 * number of menu items, avoiding bad displaying. However it is a simple handle that
 * binds a MenuRootItem with his leafs. Here will be implemented a general container
 * for everything like JButton, JChekBox...
 *
 * This class is created with NetBeans Visual Editor so it has a <code>initComponents()</code>
 * method auto-generated by IDE.
 * </p>
 *
 * @author Sebastian
 *
 */
public class AccordionBranch extends javax.swing.JPanel {

    /**
	 *
	 */
	private static final long serialVersionUID = -8997364237615807961L;

	private static final int INT_5 = 5;
	private static final int INT_40 = 40;
	private static final int INT_154 = 154;
	private static final int INT_155 = 155;

	/** Number of items in branch. */
    private int count = 0;
    /** Fake void elements used to fill blank spaces.*/
    private JTree fooItems;

    /**
     * Default constructor. Sets transparent container
     */
    public AccordionBranch() {
        initComponents();
        container.setOpaque(false);
        container.setLayout(new GridLayout(0, 1, 0, INT_5));
        this.fooItems = new JTree(new IconTreeModel());

        this.fooItems.setCellRenderer(new IconTreeRenderer());
        this.fooItems.setRootVisible(false);
        this.fooItems.setRowHeight(INT_40);
        this.fooItems.setExpandsSelectedPaths(true);
        this.fooItems.setBackground(Color.WHITE);

        container.add(this.fooItems);
    }

    /**
	 * @return Retorna el valor del atributo fooItems.
	 */
	public JTree getFooItems() {
		return fooItems;
	}

	/**
     * Add an {@link AccordionSubItem} to this branch panel.
     * @param pItem Target item to insert in.
     */
    public void addItem(TreeEntry pItem) {
        ((TreeEntry) this.fooItems.getModel().getRoot()).add(pItem);
        count++;
    }

    /**
     * Add an {@link AccordionSubItem} to this branch panel.
     * @param pItem Target item to insert in.
     */
    public void addRootItem(TreeEntry pItem) {
        this.fooItems.setModel(new IconTreeModel(pItem));
    }

    /**
     *
     * @return Number of items of branch.
     */
    public int getCount() {
        return count;
    }

    /**
    * Setea el Listener para el JTree.
    * @param pAmbarTreeListener Listener
    */
   public void setTreeListener(AmbarTreeListener pAmbarTreeListener) {
       this.fooItems.addMouseListener(pAmbarTreeListener);
   }

    /**
     * Automatic Layout code generation with NETBEANS. It uses a GroupLayout for
     * a panel with Margin around. It is more simple do that with a visual editor like
     * netbeans one that writing code from blank page.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        container = new javax.swing.JPanel();

        container.setLayout(new java.awt.GridLayout(0, 1, 0, INT_5));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(container, javax.swing.GroupLayout.DEFAULT_SIZE, INT_154, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(container, javax.swing.GroupLayout.DEFAULT_SIZE, INT_155, Short.MAX_VALUE)
                .addContainerGap())
        );
    } // </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel container;
    // End of variables declaration//GEN-END:variables
}
